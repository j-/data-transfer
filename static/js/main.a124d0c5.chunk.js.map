{"version":3,"sources":["Report.tsx","ConsoleGroup.tsx","ConsoleInput.tsx","JSONOutput.tsx","ConsoleOutput.tsx","Support.tsx","ReportFileListItem.tsx","ReportFileList.tsx","ReportItemHandle.tsx","get-files-from-entry.ts","ReportItemEntry.tsx","generate-data-transfer-report.tsx","generate-event-report.tsx","is-event.ts","generate-report.tsx","App.tsx","index.tsx"],"names":["Report","children","className","ConsoleGroup","ConsoleInput","input","JSONOutputString","value","JSON","stringify","JSONOutputNumber","toString","JSONOutputBoolean","JSONOutputArray","i","length","push","JSONOutput","Array","isArray","String","ConsoleOutput","type","output","initialResult","isPromise","React","useState","result","setResult","handleClickOpen","useCallback","blob","Blob","url","URL","createObjectURL","window","open","useEffect","isMounted","Promise","resolve","then","catch","err","message","onClick","Support","ClipboardEvent","prototype","DragEvent","document","DataTransfer","DataTransferItem","ReportFileListItem","path","index","file","lastModified","name","webkitRelativePath","size","ReportFileList","files","from","ReportItemHandle","item","getAsFileSystemHandle","isSecureContext","handle","entry","kind","getFilesFromFileSystemFileEntry","a","getFilesFromFileSystemDirectoryEntry","reader","createReader","readEntries","entries","all","map","getFilesFromEntry","entryFiles","flatten","isFile","isDirectory","Error","ReportItemEntry","webkitGetAsEntry","fullPath","getAsString","generateDataTransferReport","dt","isSafe","console","dir","flush","dropEffect","effectAllowed","types","items","subpath","getData","generateEventReport","event","isSafeEvent","timeStamp","isDragEvent","dataTransfer","clipboardData","isClipboardEvent","generateReport","Event","isEvent","App","report","setReport","handler","e","preventDefault","stopImmediatePropagation","addEventListener","removeEventListener","style","height","minHeight","defaultValue","placeholder","rootElement","getElementById","render"],"mappings":"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","file":"static/js/main.a124d0c5.chunk.js","sourcesContent":["import React from 'react';\n\nconst Report: React.FC = ({ children }) => (\n  <div className=\"Report\">\n    {children}\n  </div>\n);\n\nexport default Report;\n","import React from 'react';\nimport './ConsoleGroup.css';\n\nconst ConsoleGroup: React.FC = ({ children }) => (\n  <div className=\"ConsoleGroup\">\n    {children}\n  </div>\n);\n\nexport default ConsoleGroup;\n","import React from 'react';\nimport './ConsoleInput.css';\n\ntype Props = {\n  input: string;\n}\n\nconst ConsoleInput: React.FC<Props> = ({ input }) => (\n  <pre className=\"ConsoleInput\">\n    {input}\n  </pre>\n);\n\nexport default ConsoleInput;\n","import React from 'react';\nimport './JSONOutput.css';\n\nexport interface Props<T = any> {\n  value: T;\n}\n\nexport const JSONOutputString: React.FC<Props<string>> = ({ value }) => (\n  <code className=\"JSONOutputString\">{JSON.stringify(value)}</code>\n);\n\nexport const JSONOutputNumber: React.FC<Props<number>> = ({ value }) => (\n  <code className=\"JSONOutputNumber\">{value.toString()}</code>\n);\n\nexport const JSONOutputBoolean: React.FC<Props<boolean>> = ({ value }) => (\n  <code className=\"JSONOutputBoolean\">{value.toString()}</code>\n);\n\nexport const JSONOutputArray: React.FC<Props<Array<any>>> = ({ value }) => {\n  const children: React.ReactChild[] = [];\n  for (let i = 0; i < value.length; i++) {\n    children.push(\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      <JSONOutput value={value[i]} key={i * 2} />\n    );\n    if (i < value.length - 1) {\n      children.push(\n        <span className=\"JSONOutput-symbol\" key={i * 2 + 1}>{`, `}</span>\n      );\n    }\n  }\n  return (\n    <span className=\"JSONOutputArray\">\n      <span className=\"JSONOutput-symbol\">{`[`}</span>\n      {children}\n      <span className=\"JSONOutput-symbol\">{`]`}</span>\n    </span>\n  )\n};\n\nconst JSONOutput: React.FC<Props> = ({ value }) => (\n  Array.isArray(value) ? <JSONOutputArray value={value} /> :\n  typeof value === 'string' ? <JSONOutputString value={value} /> :\n  typeof value === 'number' ? <JSONOutputNumber value={value} /> :\n  typeof value === 'boolean' ? <JSONOutputBoolean value={value} /> :\n  <code>{String(value)}</code>\n);\n\nexport default JSONOutput;\n","import React from 'react';\nimport isPromise from 'is-promise';\nimport JSONOutput from './JSONOutput';\nimport './ConsoleOutput.css';\n\nexport type ConsoleOutputType = any;\n\ntype Props = {\n  type?: string;\n  output: ConsoleOutputType;\n}\n\nconst ConsoleOutput: React.FC<Props> = ({ type, output }) => {\n  const initialResult = isPromise(output) ? <>&hellip;</> : <JSONOutput value={output} />;\n  const [result, setResult] = React.useState(initialResult);\n\n  const handleClickOpen = React.useCallback(() => {\n    const blob = new Blob([output], { type });\n    const url = URL.createObjectURL(blob);\n    window.open(url, '_blank');\n  }, [output, type]);\n\n  React.useEffect(() => {\n    if (!isPromise(output)) return;\n    let isMounted = true;\n    Promise.resolve(output)\n      .then((result) => {\n        if (isMounted) {\n          setResult(<JSONOutput value={result} />);\n        }\n      })\n      .catch((err) => {\n        if (isMounted) {\n          setResult(<>Error: {err.message}</>);\n        }\n      })\n    return () => {\n      isMounted = false;\n    };\n  }, [output, setResult]);\n\n  return (\n    <div className=\"ConsoleOutput\">\n      <pre className=\"ConsoleOutput-contents\">{result}</pre>\n      {type && <button className=\"btn btn-dark btn-sm\" type=\"button\" onClick={handleClickOpen}>Open in new tab</button>}\n    </div>\n  );\n};\n\nexport default ConsoleOutput;\n","import React from 'react';\nimport Report from './Report';\nimport ConsoleGroup from './ConsoleGroup';\nimport ConsoleInput from './ConsoleInput';\nimport ConsoleOutput from './ConsoleOutput';\n\nconst Support: React.FC = () => {\n  return (\n    <Report>\n      <ConsoleGroup>\n        <ConsoleInput input=\"'clipboardData' in ClipboardEvent.prototype\" />\n        <ConsoleOutput output={'clipboardData' in ClipboardEvent.prototype} />\n      </ConsoleGroup>\n      <ConsoleGroup>\n        <ConsoleInput input=\"'dataTransfer' in DragEvent.prototype\" />\n        <ConsoleOutput output={'dataTransfer' in DragEvent.prototype} />\n      </ConsoleGroup>\n      <ConsoleGroup>\n        <ConsoleInput input=\"'DataTransferItem' in window\" />\n        <ConsoleOutput output={'DataTransferItem' in window} />\n      </ConsoleGroup>\n      <ConsoleGroup>\n        <ConsoleInput input=\"'DataTransferItemList' in window\" />\n        <ConsoleOutput output={'DataTransferItemList' in window} />\n      </ConsoleGroup>\n      <ConsoleGroup>\n        <ConsoleInput input=\"'ClipboardItem' in window\" />\n        <ConsoleOutput output={'ClipboardItem' in window} />\n      </ConsoleGroup>\n      <ConsoleGroup>\n        <ConsoleInput input=\"'ondrop' in window\" />\n        <ConsoleOutput output={'ondrop' in window} />\n      </ConsoleGroup>\n      <ConsoleGroup>\n        <ConsoleInput input=\"'onpaste' in document\" />\n        <ConsoleOutput output={'onpaste' in document} />\n      </ConsoleGroup>\n      {'DataTransfer' in window && (\n        <>\n          <ConsoleGroup>\n            <ConsoleInput input=\"'types' in DataTransfer.prototype\" />\n            <ConsoleOutput output={'types' in DataTransfer.prototype} />\n          </ConsoleGroup>\n          <ConsoleGroup>\n            <ConsoleInput input=\"'items' in DataTransfer.prototype\" />\n            <ConsoleOutput output={'items' in DataTransfer.prototype} />\n          </ConsoleGroup>\n          <ConsoleGroup>\n            <ConsoleInput input=\"'files' in DataTransfer.prototype\" />\n            <ConsoleOutput output={'files' in DataTransfer.prototype} />\n          </ConsoleGroup>\n        </>\n      )}\n      {'DataTransferItem' in window && (\n        <>\n          <ConsoleGroup>\n            <ConsoleInput input=\"'getAsFileSystemHandle' in DataTransferItem.prototype\" />\n            <ConsoleOutput output={'getAsFileSystemHandle' in DataTransferItem.prototype} />\n          </ConsoleGroup>\n          <ConsoleGroup>\n            <ConsoleInput input=\"'webkitGetAsEntry' in DataTransferItem.prototype\" />\n            <ConsoleOutput output={'webkitGetAsEntry' in DataTransferItem.prototype} />\n          </ConsoleGroup>\n        </>\n      )}\n    </Report>\n  );\n}\n\nexport default Support;\n","import React from 'react';\nimport ConsoleGroup from './ConsoleGroup';\nimport ConsoleInput from './ConsoleInput';\nimport ConsoleOutput from './ConsoleOutput';\nimport Report from './Report';\n\ntype Props = {\n  path: string;\n  index: number;\n  file: File;\n};\n\nconst ReportFileListItem: React.FC<Props> = ({ path, index, file }) => (\n  <Report>\n    <h4 className=\"h3 my-5\">Files &mdash; File {index}</h4>\n    <ConsoleGroup>\n      <ConsoleInput input={`${path}.lastModified`} />\n      <ConsoleOutput output={file.lastModified} />\n    </ConsoleGroup>\n    <ConsoleGroup>\n      <ConsoleInput input={`${path}.name`} />\n      <ConsoleOutput output={file.name} />\n    </ConsoleGroup>\n    <ConsoleGroup>\n      <ConsoleInput input={`${path}.webkitRelativePath`} />\n      <ConsoleOutput output={file.webkitRelativePath} />\n    </ConsoleGroup>\n    <ConsoleGroup>\n      <ConsoleInput input={`${path}.size`} />\n      <ConsoleOutput output={file.size} />\n    </ConsoleGroup>\n    <ConsoleGroup>\n      <ConsoleInput input={`${path}.type`} />\n      <ConsoleOutput output={file.type} />\n    </ConsoleGroup>\n  </Report>\n);\n\nexport default ReportFileListItem;\n","import React from 'react';\nimport ConsoleGroup from './ConsoleGroup';\nimport ConsoleInput from './ConsoleInput';\nimport ConsoleOutput from './ConsoleOutput';\nimport Report from './Report';\nimport ReportFileListItem from './ReportFileListItem';\n\ntype Props = {\n  path: string;\n  files: FileList;\n};\n\nconst ReportFileList: React.FC<Props> = ({ path, files }) => (\n  <Report>\n    <h3 key=\"files\" className=\"h3 my-5\">Files</h3>\n    <div>\n      <ConsoleGroup>\n        <ConsoleInput input={path} />\n        <ConsoleOutput output={files} />\n      </ConsoleGroup>\n      <ConsoleGroup>\n        <ConsoleInput input={`${path}.length`} />\n        <ConsoleOutput output={files.length} />\n      </ConsoleGroup>\n    </div>\n    {Array.from(files, (file, i) => (\n      <ReportFileListItem\n        key={`report-file-list-item-${i}`}\n        path={`${path}[${i}]`}\n        index={i}\n        file={file}\n      />\n    ))}\n  </Report>\n);\n\nexport default ReportFileList;\n","import React from 'react';\nimport ConsoleGroup from './ConsoleGroup';\nimport ConsoleInput from './ConsoleInput';\nimport ConsoleOutput from './ConsoleOutput';\nimport Report from './Report';\n\ntype Props = {\n  path: string;\n  index: number;\n  item: DataTransferItem;\n};\n\nconst hellip = '\\u2026';\n\nconst ReportItemHandle: React.FC<Props> = ({ path, index, item }) => (\n  <Report>\n    <h5 className=\"h3 my-5\">Items &mdash; Item {index} &mdash; Handle</h5>\n    <ConsoleGroup>\n      <ConsoleInput input={`typeof ${path}.getAsFileSystemHandle`} />\n      <ConsoleOutput output={typeof item.getAsFileSystemHandle} />\n    </ConsoleGroup>\n    {typeof item.getAsFileSystemHandle === 'function' && window.isSecureContext && (\n      (() => {\n        const handle = item.getAsFileSystemHandle();\n        return (\n          <>\n            <ConsoleGroup>\n              <ConsoleInput input={`${path}.getAsFileSystemHandle()`} />\n              <ConsoleOutput output={handle} />\n            </ConsoleGroup>\n            <ConsoleGroup>\n              <ConsoleInput input={`${path}.getAsFileSystemHandle()${hellip}.kind`} />\n              <ConsoleOutput output={handle.then((entry) => entry.kind)} />\n            </ConsoleGroup>\n            <ConsoleGroup>\n              <ConsoleInput input={`${path}.getAsFileSystemHandle()${hellip}.name`} />\n              <ConsoleOutput output={handle.then((entry) => entry.name)} />\n            </ConsoleGroup>\n          </>\n        );\n      })()\n    )}\n  </Report>\n);\n\nexport default ReportItemHandle;\n","import flatten from 'lodash.flatten';\n\nexport const getFilesFromFileSystemFileEntry = async (entry: FileSystemFileEntry): Promise<File[]> => {\n  const file = await new Promise<File>((resolve) => {\n    entry.file(resolve);\n  });\n  return [file];\n};\n\nexport const getFilesFromFileSystemDirectoryEntry = async (entry: FileSystemDirectoryEntry): Promise<File[]> => {\n  const reader = entry.createReader();\n  const entries = await new Promise<(FileSystemFileEntry | FileSystemDirectoryEntry)[]>((resolve) => {\n    reader.readEntries(resolve);\n  });\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  const entryFiles = await Promise.all(entries.map(getFilesFromEntry));\n  return flatten(entryFiles);\n};\n\nexport const getFilesFromEntry = async (entry: FileSystemFileEntry | FileSystemDirectoryEntry): Promise<File[]> => {\n  if (entry.isFile) {\n    return getFilesFromFileSystemFileEntry(entry);\n  } else if (entry.isDirectory) {\n    return getFilesFromFileSystemDirectoryEntry(entry);\n  } else {\n    throw new Error('Expected entry to be file or directory');\n  }\n};\n","import React from 'react';\nimport ConsoleGroup from './ConsoleGroup';\nimport ConsoleInput from './ConsoleInput';\nimport ConsoleOutput from './ConsoleOutput';\nimport { getFilesFromEntry } from './get-files-from-entry';\nimport Report from './Report';\n\ntype Props = {\n  path: string;\n  index: number;\n  item: DataTransferItem;\n};\n\nconst ReportItemEntry: React.FC<Props> = ({ path, index, item }) => (\n  <Report>\n    <h5 className=\"h3 my-5\">Items &mdash; Item {index}  &mdash; Entry</h5>\n    <ConsoleGroup>\n      <ConsoleInput input={`typeof ${path}.webkitGetAsEntry`} />\n      <ConsoleOutput output={typeof item.webkitGetAsEntry} />\n    </ConsoleGroup>\n    {typeof item.webkitGetAsEntry === 'function' && window.isSecureContext && (\n      (() => {\n        const entry = item.webkitGetAsEntry();\n        if (entry == null) {\n          return (\n            <ConsoleGroup>\n              <ConsoleInput input={`${path}.webkitGetAsEntry()`} />\n              <ConsoleOutput output={entry} />\n            </ConsoleGroup>\n          );\n        }\n        return (\n          <>\n            <ConsoleGroup>\n              <ConsoleInput input={`${path}.webkitGetAsEntry().isFile`} />\n              <ConsoleOutput output={entry.isFile} />\n            </ConsoleGroup>\n            <ConsoleGroup>\n              <ConsoleInput input={`${path}.webkitGetAsEntry().isDirectory`} />\n              <ConsoleOutput output={entry.isDirectory} />\n            </ConsoleGroup>\n            <ConsoleGroup>\n              <ConsoleInput input={`${path}.webkitGetAsEntry().name`} />\n              <ConsoleOutput output={entry.name} />\n            </ConsoleGroup>\n            <ConsoleGroup>\n              <ConsoleInput input={`${path}.webkitGetAsEntry().fullPath`} />\n              <ConsoleOutput output={entry.fullPath} />\n            </ConsoleGroup>\n            <ConsoleGroup>\n              <ConsoleInput input={`getFilesFromEntry(${path}.webkitGetAsEntry())`} />\n              <ConsoleOutput output={Promise.resolve().then(() => getFilesFromEntry(entry)).then((files) => files.map((file) => file.name))} />\n            </ConsoleGroup>\n          </>\n        );\n      })()\n    )}\n  </Report>\n);\n\nexport default ReportItemEntry;\n","import React from 'react';\nimport ConsoleGroup from './ConsoleGroup';\nimport ConsoleInput from './ConsoleInput';\nimport ConsoleOutput, { ConsoleOutputType } from './ConsoleOutput';\nimport ReportFileList from './ReportFileList';\nimport ReportItemHandle from './ReportItemHandle';\nimport ReportItemEntry from './ReportItemEntry';\n\nconst getAsString = (item: DataTransferItem) => (\n  new Promise((resolve) => {\n    item.getAsString((result) => resolve(result));\n  })\n);\n\nconst hellip = '\\u2026';\n\nexport const generateDataTransferReport = (path: string, dt: DataTransfer, isSafe = false): React.ReactChild => {\n  const children: React.ReactChild[] = [];\n\n  if (isSafe) {\n    console.dir(dt);\n  }\n\n  const push = (input: string, output: ConsoleOutputType, type?: string): void => {\n    children.push(\n      <ConsoleGroup key={`${input}-${output}`}>\n        <ConsoleInput input={input} />\n        <ConsoleOutput output={output} type={type} />\n      </ConsoleGroup>\n    );\n  };\n\n  const flush = (): React.ReactChild => {\n    return <>{children}</>;\n  };\n\n  push(`${path}.dropEffect`, dt.dropEffect);\n  push(`${path}.effectAllowed`, dt.effectAllowed);\n  push(`${path}.types`, dt.types);\n\n  children.push(<h3 key=\"dt-items\" className=\"my-5\">Items</h3>);\n\n  if (dt.items) {\n    push(`${path}.items`, dt.items);\n    push(`${path}.items.length`, dt.items.length);\n\n    for (let i = 0; i < dt.items.length; i++) {\n      children.push(<h4 key={`dt-item-${i}`} className=\"h3 my-5\">Items &mdash; Item {i}</h4>);\n\n      const item = dt.items[i];\n      const subpath = `${path}.items[${i}]`;\n      push(`${subpath}.kind`, item.kind);\n      push(`${subpath}.type`, item.type);\n      if (item.kind === 'string') {\n        push(\n          `${path}.getData(${JSON.stringify(item.type)})`,\n          dt.getData(item.type),\n          item.type\n        );\n        if (isSafe) {\n          push(\n            `${subpath}.getAsString()${hellip}`,\n            getAsString(item),\n            item.type\n          );\n        }\n      } else {\n        children.push(\n          <ReportItemHandle\n            key={`report-item-${i}-handle`}\n            path={subpath}\n            index={i}\n            item={item}\n          />\n        );\n        children.push(\n          <ReportItemEntry\n            key={`report-item-${i}-entry`}\n            path={subpath}\n            index={i}\n            item={item}\n          />\n        );\n      }\n    }\n  }\n\n  children.push(<ReportFileList key=\"report-file-list\" path={`${path}.files`} files={dt.files} />);\n\n  return flush();\n};\n","import React from 'react';\nimport ConsoleGroup from './ConsoleGroup';\nimport ConsoleInput from './ConsoleInput';\nimport ConsoleOutput, { ConsoleOutputType } from './ConsoleOutput';\nimport { isClipboardEvent, isDragEvent, isSafeEvent } from './is-event';\nimport { generateDataTransferReport } from './generate-data-transfer-report';\n\nexport const generateEventReport = (path: string, event: ClipboardEvent | DragEvent): React.ReactChild => {\n  const children: React.ReactChild[] = [];\n  const isSafe = isSafeEvent(event);\n\n  if (isSafe) {\n    console.dir(event);\n  }\n\n  const push = (input: string, output: ConsoleOutputType): void => {\n    children.push(\n      <ConsoleGroup key={`${input}-${output}`}>\n        <ConsoleInput input={input} />\n        <ConsoleOutput output={output} />\n      </ConsoleGroup>\n    );\n  };\n\n  const flush = (): React.ReactChild => {\n    return <>{children}</>;\n  };\n\n  children.push(<h3 key=\"basics\" className=\"my-5\">Basics</h3>);\n\n  push(`${path}.type`, event.type);\n  push(`${path}.timeStamp`, event.timeStamp);\n\n  let dt: DataTransfer;\n  let subpath: string;\n\n  if (isDragEvent(event)) {\n    push(`${path}.dataTransfer`, event.dataTransfer);\n    push(`${path}.clipboardData`, (event as any).clipboardData);\n    if (event.dataTransfer == null) {\n      return flush();\n    }\n    dt = event.dataTransfer;\n    subpath = `${path}.dataTransfer`;\n  } else if (isClipboardEvent(event)) {\n    push(`${path}.clipboardData`, event.clipboardData);\n    push(`${path}.dataTransfer`, (event as any).dataTransfer);\n    if (event.clipboardData == null) {\n      return flush();\n    }\n    dt = event.clipboardData;\n    subpath = `${path}.clipboardData`;\n  } else {\n    return flush();\n  }\n\n  children.push(generateDataTransferReport(subpath, dt, isSafe));\n\n  return flush();\n};\n","export const isEvent = (item: any): item is Event => (\n  item instanceof Event\n);\n\nexport const isDragEvent = (event: Event): event is DragEvent => (\n  event.type === 'drag' ||\n  event.type === 'dragend' ||\n  event.type === 'dragenter' ||\n  event.type === 'dragexit' ||\n  event.type === 'dragleave' ||\n  event.type === 'dragover' ||\n  event.type === 'dragstart' ||\n  event.type === 'drop'\n);\n\nexport const isClipboardEvent = (event: Event): event is ClipboardEvent => (\n  event.type === 'copy' ||\n  event.type === 'cut' ||\n  event.type === 'paste'\n);\n\nexport const isSafeEvent = (event: Event): boolean => (\n  event.type === 'drop' ||\n  event.type === 'paste'\n);\n","import React from 'react';\nimport Report from './Report';\nimport { isEvent } from './is-event';\nimport { generateEventReport } from './generate-event-report';\nimport { generateDataTransferReport } from './generate-data-transfer-report';\n\nexport const generateReport = (item: ClipboardEvent | DragEvent | DataTransfer): React.ReactChild => {\n  if (isEvent(item)) {\n    return <Report>{generateEventReport('event', item)}</Report>;\n  } else {\n    return <Report>{generateDataTransferReport('dt', item, true)}</Report>;\n  }\n};\n","import React from 'react';\nimport Support from './Support';\nimport { generateReport } from './generate-report';\n\nconst App: React.FC = () => {\n  const [report, setReport] = React.useState<React.ReactNode>(null);\n\n  React.useEffect(() => {\n    const handler = (e: ClipboardEvent | DragEvent) => {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n      setReport(generateReport(e));\n    };\n    window.addEventListener('dragover', handler);\n    window.addEventListener('drop', handler);\n    document.addEventListener('paste', handler);\n    return () => {\n      window.removeEventListener('dragover', handler);\n      window.removeEventListener('drop', handler);\n      document.removeEventListener('paste', handler);\n    };\n  }, []);\n\n  return (\n    <div className=\"App container my-5\">\n      <h1 className=\"my-5\">Data transfer</h1>\n      <textarea\n        className=\"form-control my-5\"\n        style={{ height: '4em', minHeight: '4em' }}\n        defaultValue=\"\"\n        placeholder=\"Paste something into this textarea or this window, or drop something onto this window&hellip;\"\n      />\n\n      {report && (\n        <>\n          <h2 className=\"my-3\">Output</h2>\n          <div className=\"my-5\">{report}</div>\n        </>\n      )}\n\n      <h2 className=\"my-3\">Support</h2>\n      <div className=\"my-5\"><Support /></div>\n\n    </div>\n  );\n};\n\nexport default App;\n","import { render } from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst rootElement = document.getElementById('root');\nrender(<App />, rootElement);\n"],"sourceRoot":""}